* [[http://lpsolve.sourceforge.net/5.1/formulate.htm][Farmer's problem]]

Suppose a farmer has 75 acres on which to plant two crops: wheat and barley.
To produce these crops, it costs the farmer (for seed, fertilizer, etc.) $120 per acre
for the wheat and  $210 per acre for the barley. The farmer has $15000 available for expenses.
But after the harvest, the farmer must store the crops while awaiting favourable market
conditions. The farmer has storage space for 4000 bushels. Each acre yields an average of
110 bushels of wheat or 30 bushels of barley.  If the net profit per bushel of
wheat (after all expenses have been subtracted) is $1.30 and for barley is $2.00,
how should the farmer plant the 75 acres to maximize profit?

Let x denote the number of acres allotted to wheat and y the number of acres allotted to barley.
Then the expression to be maximized, that is the profit, is clearly

P = (110)(1.30)x + (30)(2.00)y = 143x + 60y.

There are three constraint inequalities, specified by the limits on expenses, storage and acreage.
They are respectively:

120x + 210y <= 15000
110x + 30y <= 4000
x + y <= 75

Strictly speaking there are two more constraint inequalities forced by the fact that the farmer
cannot plant a negative number of acres, namely:

x >= 0, y >= 0.

#+BEGIN_SRC sh :results output drawer :exports both
lp_solve <<EOF

max: 143 x + 60 y;

120 x + 210 y <= 15000;
110 x + 30 y <= 4000;
x + y <= 75;
x >= 0;
y >= 0;

EOF
#+END_SRC

#+RESULTS:
:RESULTS:

Value of objective function: 6315.62

Actual values of the variables:
x                          21.875
y                          53.125
:END:

* [[https://www.coursera.org/learn/algorithms-part2/home/week/6][Brewer's problem]]

Small brewery produces ale and beer.
Production limited by scarce resources:
- corn (480 lbs)
- hops (160 oz)
- barley malt (1190 lbs)
Recipes require different proportions of resources per barrel:
- ale  (corn  5 lbs, hops 4 oz, malt 35 lbs)
- beer (corn 15 lbs, hops 4 oz, malt 20 lbs)
Profit per barrel:
- ale  ($13)
- beer ($23)
Choose product mix to maximize profits.

#+BEGIN_SRC sh :results output drawer :exports both
lp_solve <<EOF

//    ALE    BEER
max:  13 A + 23 B;         // profit

corn:  5 A + 15 B <= 480;
hops:  4 A +  4 B <= 160;
malt: 35 A + 20 B <= 1190;

A >= 0;
B >= 0;

EOF
#+END_SRC

#+RESULTS:
:RESULTS:

Value of objective function: 800

Actual values of the variables:
A                              12
B                              28
:END:

* Network Flow

** Source file

#+BEGIN_SRC sh :results output :exports both
cat ../data/tinyFN.txt
#+END_SRC

#+RESULTS:
#+begin_example
6
8
0 1 2.0
0 2 3.0
1 3 3.0
1 4 1.0
2 3 1.0
2 4 1.0
3 5 2.0
4 5 3.0
#+end_example

** Network

#+NAME: tiny_fn
#+BEGIN_SRC sh :results output :exports both
make run CLASS=FlowNetwork ARGS="../data/tinyFN.txt dot"
#+END_SRC

#+RESULTS: tiny_fn
#+begin_example
digraph {
   0 -> 1 [label="0.0/2.0"]
   0 -> 2 [label="0.0/3.0"]
   1 -> 3 [label="0.0/3.0"]
   1 -> 4 [label="0.0/1.0"]
   2 -> 3 [label="0.0/1.0"]
   2 -> 4 [label="0.0/1.0"]
   3 -> 5 [label="0.0/2.0"]
   4 -> 5 [label="0.0/3.0"]
}

#+end_example

#+BEGIN_SRC dot :file tinyFN.png :var src=tiny_fn :exports results
$src
#+END_SRC

#+RESULTS:
[[file:tinyFN.png]]


** Network flow solution

#+BEGIN_SRC sh :results output :exports both
make run CLASS=FordFulkerson ARGS="../data/tinyFN.txt"
#+END_SRC

#+RESULTS:
#+begin_example
Max flow from 0 to 5
   0->1 2.00 2.00
   0->2 3.00 2.00
   1->3 3.00 1.00
   1->4 1.00 1.00
   2->3 1.00 1.00
   2->4 1.00 1.00
   3->5 2.00 2.00
   4->5 3.00 2.00
Max flow value = 4.00
#+end_example

#+NAME: tiny_maxflow
#+BEGIN_SRC sh :results output :exports both
make run CLASS=FordFulkerson ARGS="../data/tinyFN.txt dot"
#+END_SRC

#+RESULTS: tiny_maxflow
#+begin_example
digraph {
   0 -> 1 [label="2.0/2.0", penwidth=3.0]
   0 -> 2 [label="2.0/3.0", penwidth=3.0]
   1 -> 3 [label="1.0/3.0", penwidth=3.0]
   1 -> 4 [label="1.0/1.0", penwidth=3.0]
   2 -> 3 [label="1.0/1.0", penwidth=3.0]
   2 -> 4 [label="1.0/1.0", penwidth=3.0]
   3 -> 5 [label="2.0/2.0", penwidth=3.0]
   4 -> 5 [label="2.0/3.0", penwidth=3.0]
}

#+end_example

#+BEGIN_SRC dot :file tinyMaxFlow.png :var src=tiny_maxflow :exports results
$src
#+END_SRC

#+RESULTS:
[[file:tinyMaxFlow.png]]


** Linear Programming Solution

#+BEGIN_SRC sh :results output drawer :exports both
lp_solve <<EOF

max: x35 + x45;

0 <= x01 <= 2;
0 <= x02 <= 3;
0 <= x13 <= 3;
0 <= x14 <= 1;
0 <= x23 <= 1;
0 <= x24 <= 1;
0 <= x35 <= 2;
0 <= x45 <= 3;

x01 = x13 + x14;
x02 = x23 + x24;
x13 + x23 = x35;
x14 + x24 = x45;

EOF
#+END_SRC

#+RESULTS:
:RESULTS:

Value of objective function: 4

Actual values of the variables:
x35                             2
x45                             2
x01                             2
x02                             2
x13                             1
x14                             1
x23                             1
x24                             1
:END:
